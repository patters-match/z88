lstoff

; **************************************************************************************************
; Standard Z88 Operating System Manifests
;
; This file is part of the Z88 operating system, OZ      0000000000000000      ZZZZZZZZZZZZZZZZZZZ
;                                                       000000000000000000   ZZZZZZZZZZZZZZZZZZZ
; OZ is free software; you can redistribute it and/    0000            0000              ZZZZZ
; or modify it under the terms of the GNU General      0000            0000            ZZZZZ
; Public License as published by the Free Software     0000            0000          ZZZZZ
; Foundation; either version 2, or (at your option)    0000            0000        ZZZZZ
; any later version. OZ is distributed in the hope     0000            0000      ZZZZZ
; that it will be useful, but WITHOUT ANY WARRANTY;    0000            0000    ZZZZZ
; without even the implied warranty of MERCHANTA-       000000000000000000   ZZZZZZZZZZZZZZZZZZZZ
; BILITY or FITNESS FOR A PARTICULAR PURPOSE. See        0000000000000000  ZZZZZZZZZZZZZZZZZZZZ
; the GNU General Public License for more details.
; You should have received a copy of the GNU General Public License along with OZ; see the file
; COPYING. If not, write to:
;                                  Free Software Foundation, Inc.
;                                  59 Temple Place-Suite 330,
;                                  Boston, MA 02111-1307, USA.
;
; (C) Jorma Oksanen (jorma.oksanen@aini.fi), 2003
; (C) Thierry Peycru (pek@users.sf.net), 2005-2007
; (C) Gunther Strube (gstrube@gmail.com), 2005-2007
;
; ***************************************************************************************************


; Floating point package (FPP):

IF !__FPP_DEF__
     DEFINE __FPP_DEF__

     INCLUDE "macros.def"

; function codes:
          DEFC FP_AND = $21        ; bitwise AND
          DEFC FP_IDV = $24        ; integer division
          DEFC FP_EOR = $27        ; bitwise XOR
          DEFC FP_MOD = $2A        ; integer remainder
          DEFC FP_OR  = $2D        ; bitwise OR
          DEFC FP_LEQ = $30        ; less than or equal to
          DEFC FP_NEQ = $33        ; not equal to
          DEFC FP_GEQ = $36        ; greater than or equal to
          DEFC FP_LT  = $39        ; less than
          DEFC FP_EQ  = $3C        ; equal
          DEFC FP_MUL = $3F        ; multiply
          DEFC FP_ADD = $42        ; add
          DEFC FP_GT  = $45        ; greater than
          DEFC FP_SUB = $48        ; subtract
          DEFC FP_PWR = $4B        ; raise to the power
          DEFC FP_DIV = $4E        ; divide
          DEFC FP_ABS = $51        ; absolute value
          DEFC FP_ACS = $54        ; arc cosine
          DEFC FP_ASN = $57        ; arc sine
          DEFC FP_ATN = $5A        ; arc tangent
          DEFC FP_COS = $5D        ; cosine
          DEFC FP_DEG = $60        ; radians to degrees
          DEFC FP_EXP = $63        ; exponential
          DEFC FP_INT = $66        ; integer value
          DEFC FP_LN  = $69        ; base e (natural) logarithm
          DEFC FP_LOG = $6C        ; base 10 (common) logarithmn
          DEFC FP_NOT = $6F        ; bitwise NOT
          DEFC FP_RAD = $72        ; degrees to radians
          DEFC FP_SGN = $75        ; sign
          DEFC FP_SIN = $78        ; sinus
          DEFC FP_SQR = $7B        ; square root
          DEFC FP_TAN = $7E        ; tangent
          DEFC FP_ZER = $81        ; zero
          DEFC FP_ONE = $84        ; one
          DEFC FP_TRU = $87        ; true (-1)
          DEFC FP_PI  = $8A        ; PI
          DEFC FP_VAL = $8D        ; numeric value of string
          DEFC FP_STR = $90        ; string value of a number
          DEFC FP_FIX = $93        ; truncate a float to an integer
          DEFC FP_FLT = $96        ; integer to float conversion
          DEFC FP_TST = $99        ; test number for zero and sign
          DEFC FP_CMP = $9C        ; compare two numbers
          DEFC FP_NEG = $9F        ; negate number
          DEFC FP_BAS = $A2        ; call Floating point package function

               ; arguments
               DEFC FB_AND = 0     ; bitwise AND
               DEFC FB_IDV = 1     ; integer division
               DEFC FB_EOR = 2     ; bitwise XOR
               DEFC FB_MOD = 3     ; integer remainder
               DEFC FB_OR  = 4     ; bitwise OR
               DEFC FB_LEQ = 5     ; less than or equal to
               DEFC FB_NEQ = 6     ; not equal to
               DEFC FB_GEQ = 7     ; greater than or equal to
               DEFC FB_LT  = 8     ; less than
               DEFC FB_EQ  = 9     ; equal
               DEFC FB_MUL = 10    ; multiply
               DEFC FB_ADD = 11    ; add
               DEFC FB_GT  = 12    ; greater than
               DEFC FB_SUB = 13    ; subtract
               DEFC FB_PWR = 14    ; raise to the power
               DEFC FB_DIV = 15    ; divide
               DEFC FB_ABS = 16    ; absolute value
               DEFC FB_ACS = 17    ; arc cosine
               DEFC FB_ASN = 18    ; arc sine
               DEFC FB_ATN = 19    ; arc tangent
               DEFC FB_COS = 20    ; cosine
               DEFC FB_DEG = 21    ; radians to degrees
               DEFC FB_EXP = 22    ; exponential
               DEFC FB_INT = 23    ; integer value
               DEFC FB_LN  = 24    ; base e (natural) logarithm
               DEFC FB_LOG = 25    ; base 10 (common) logarithmn
               DEFC FB_NOT = 26    ; bitwise NOT
               DEFC FB_RAD = 27    ; degrees to radians
               DEFC FB_SGN = 28    ; sign
               DEFC FB_SIN = 29    ; sinus
               DEFC FB_SQR = 30    ; square root
               DEFC FB_TAN = 31    ; tangent
               DEFC FB_ZER = 32    ; zero
               DEFC FB_ONE = 33    ; one
               DEFC FB_TRU = 34    ; true (-1)
               DEFC FB_PI  = 35    ; PI
               DEFC FB_VAL = 36    ; numeric value of string
               DEFC FB_STR = 37    ; string value of a number
               DEFC FB_FIX = 38    ; truncate a float to an integer
               DEFC FB_FLT = 39    ; integer to float conversion
               DEFC FB_TST = 40    ; test number for zero and sign
               DEFC FB_CMP = 41    ; compare two numbers
               DEFC FB_NEG = 42    ; negate number
ENDIF

lston
