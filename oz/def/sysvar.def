lstoff

; **************************************************************************************************
; OZ ram variables area definitions.
;
; This file is part of the Z88 operating system, OZ      0000000000000000      ZZZZZZZZZZZZZZZZZZZ
;                                                       000000000000000000   ZZZZZZZZZZZZZZZZZZZ
; OZ is free software; you can redistribute it and/    0000            0000              ZZZZZ
; or modify it under the terms of the GNU General      0000            0000            ZZZZZ
; Public License as published by the Free Software     0000            0000          ZZZZZ
; Foundation; either version 2, or (at your option)    0000            0000        ZZZZZ
; any later version. OZ is distributed in the hope     0000            0000      ZZZZZ
; that it will be useful, but WITHOUT ANY WARRANTY;    0000            0000    ZZZZZ
; without even the implied warranty of MERCHANTA-       000000000000000000   ZZZZZZZZZZZZZZZZZZZZ
; BILITY or FITNESS FOR A PARTICULAR PURPOSE. See        0000000000000000  ZZZZZZZZZZZZZZZZZZZZ
; the GNU General Public License for more details.
; You should have received a copy of the GNU General Public License along with OZ; see the file
; COPYING. If not, write to:
;                                  Free Software Foundation, Inc.
;                                  59 Temple Place-Suite 330,
;                                  Boston, MA 02111-1307, USA.
;
; Original implementation by
; (C) Jorma Oksanen (jorma.oksanen@aini.fi), 2003
;
; Additional improvements, comments, definitions and new implementations by
; (C) Thierry Peycru (pek@users.sf.net), 2005-2007
; (C) Gunther Strube (gbs@users.sf.net), 2005-2007
;
; $Id$
;***************************************************************************************************
;
;
;       variable prefix:
;
;       a       ASCII string
;       c       character code
;       p       pointer (16 bits)
;       e       extended pointer (24 bits)
;       f       float (40 bits)
;
;       sl      signed long (32 bits)
;       ul      unsigned long (32 bits)
;       sw      signed word (16 bits)
;       uw      unsigned word (16 bits)
;       sb      signed byte (8 bits)
;       ub      unsigned byte (8 bits)
;
;
; Constants are all uppercase

        include "kernel.def"
        include "z80.def"

; System variable area
defc    sysvar_area = $020b
defc    ubScreenBase            =$020b
defc    KbdData                 =$0216          ; data on both negative and positive side
defc    SerTXHandle             =$0229          ; on negative side!
defc    SerRXHandle             =$0233          ; on negative side!
defc    ubFsTemp                =$0237
defc    uwSmallTimer            =$0238
defc    uwSlotAvailFsBlocks     =$023a          ; ds.b 4*2
defc    pFsMemPool              =$0244
defc    uwFsAvailBlock          =$0246
defc    word_024A               =$024a          ; used in nqsp.asm
defc    pMTHScreenSave          =$024e
defc    pMTHHelpHandle          =$0250
defc    word_0252               =$0252          ; used in nqsp.asm
defc    uwPanelFilePtr          =$0256
defc    ubSysFlags1             =$0258
defc    cExtendedChar           =$0259
defc    OZcmdBuf                =$025a
defc    pNMIStackPtr            =$0260
defc    ubWaitCount1            =$0262
defc    ubWaitCount2            =$0263
defc    ubTimeoutCnt            =$0264
defc    ubCLIActiveCnt          =$0265
defc    ubNextAlmSeconds        =$0266
defc    uwNextAlmMinutes        =$0267
defc    ubNextAlmMinutesB       =$0269
defc    ubSoundActive           =$026a
defc    ubSoundCount            =$026b
defc    ubAlmDisableCnt         =$026e
defc    ubAlmDisplayCnt         =$026f
defc    ubNumActiveAlm          =$0270
defc    ubAlmActionCnt          =$0271
defc    pFirstAlarm             =$0272
defc    pNextAlmHandle          =$0274
defc    pPrefs1                 =$0276
defc    pPrefs2                 =$0278
defc    ulSlot1ID               =$027b
defc    ulSlot2ID               =$027f
defc    ulSlot3ID               =$0283
defc    ubHlpActiveCmd          =$0287
defc    ubHlpActiveTpc          =$0288
defc    ubHlpActiveHelp         =$0289
defc    ubHlpActiveApp          =$028a
defc    eHlpAppDOR              =$028c
defc    eHlpTopics              =$028f
defc    eHlpCommands            =$0292
defc    eHlpHelp                =$0295
defc    eHlpTokens              =$0298
defc    ActiveAppHandle         =$029b          ; actual handle structure
defc    uwOSTinTimeout          =$02ab
defc    pOSEntHandle            =$02ad
                                                ; $02af-$03af is a system page

;       uwAppStaticHnd-(pAppEnvHandle-1) is cleared when new app is created

defc    uwAppStaticHnd          =$03b0
defc    ubAppDynID              =$03b2
defc    ubAppResCycle           =$03b3
defc    pAppEntrypoint          =$03b4
defc    ubAppDORFlags           =$03b6
defc    ubAppDORFlags2          =$03b7
defc    uwAppEnvOverhead        =$03b8
defc    pAppStackPtr            =$03ba
defc    pAppUnSafeArea          =$03bc
defc    pAppBadMemTable         =$03be
defc    pAppBadMemHandle        =$03c0
defc    ubAppContRAM            =$03c2
defc    ubAppBindings           =$03c3
defc    ubAppKbdBits            =$03c7
defc    pMailbox                =$03c8
defc    ubMailboxSize           =$03ca
defc    pAppErrorHandler        =$03cc
defc    ubAppLastError          =$03ce
defc    ubAppCallLevel          =$03cf
defc    ubOldCallLevel          =$03d0
defc    pAppHelpHandle          =$03d1
defc    ubAppHelpBank           =$03d3
defc    eAppDOR_2               =$03d4
defc    eAppTopics_2            =$03d7
defc    eAppCommands_2          =$03da
defc    eAppHelp_2              =$03dd
defc    eAppTokens_2            =$03e0

defc    pAppEnvHandle           =$03f0
defc    uwFreeRAMPages          =$03f2
defc    pFirstHandle            =$03f4
defc    ubIntTaskToDo           =$03f6
defc    ubIntStatus             =$03f7
defc    ubSlotRamSize           =$03fc
defc    ubSlotRAMoffset         =$03f8

defvars $0400
; Random
        ubRandomPtr             ds.b    1
        uwRandom1               ds.w    1
        uwRandom2               ds.w    1

; Keymaps
        ubKmBank                ds.b    1       ; memory bank where tables are, bound in S2
        ubKmPage                ds.b    1       ; high byte of address
        ubKmCaps                ds.b    1       ; low byte of CAPS translation table address
        ubKmDiamond             ds.b    1       ; low byte of <> translation table address
        ubKmSquare              ds.b    1       ; low byte of [] translation table address
        ubKmDeadkey             ds.b    1       ; low byte of deadkey table address
        ubKmDeadchar            ds.b    1       ; char displayed in OZ window
        ubKmDeadsub             ds.b    1       ; offset to list for current deadkey
        aKmCountry              ds.w    1       ; country id for OZ window

; Preserved system area (32 bytes preserved over a soft reset)
; (040F-042E)
        sysvar_area_presv
        ubTimeBufferSelect      ds.b    1       ; select time buffer A or B (was $2100A0)
        ubTIM0_A                ds.b    1       ; buffer A : TIM0-4
        ubTIM1_A                ds.b    1
        ubTIM2_A                ds.b    1
        ubTIM3_A                ds.b    1
        ubTIM4_A                ds.b    1
        ubTIM0_B                ds.b    1       ; buffer B : TIM0-4
        ubTIM1_B                ds.b    1
        ubTIM2_B                ds.b    1
        ubTIM3_B                ds.b    1
        ubTIM4_B                ds.b    1
        uwSysDateLow            ds.w    1       ; 11 bytes buffer for system time
        uwSysDateMid            ds.w    1
        uwSysDateHigh           ds.w    1
        SysTimeBuffer           ds.b    5
        free_free               ds.b    10      ; 10 bytes are left in this area

; Preserved panel system area (11 bytes preserved over a soft reset)
; 042F-0435
        panel_area_presv
        ubResetType             ds.b    1       ; $00 hard / $FF soft
        ubTimeout               ds.b    1       ; panel system parameters
        ubRepeat                ds.b    1       ; "
        cKeyclick               ds.b    1       ; "
        cSound                  ds.b    1       ; "
        ubBadSize               ds.b    1       ; "
        cCountry                ds.b    1       ; country code
        sysvar_area_presv_end
        free_free_free          ds.b    10      ; (0436-043F) 10 bytes free

; Keyboard buffer
        KbdBuffer               ds.b    32      ; $0440-045F

; Hardware port softcopies
        BlinkPortSoftCopies     ds.b    160     ; $0460-$04FF

; Handles
        Handles                 ds.b    16*96   ; HNDLEN * NUMHANDLE

; Serial interface buffers
        SerTXBuffer             ds.b    128     ; $0B00-$0B7F
        SerRXBuffer             ds.b    128     ; $0B80-$0BFF
enddef

; NMI/wait

defc    uwTimecounter           =$0c00
defc    ubTimecounterSoft       =$0c02
defc    NMIStackTop             =$0c33

; EPROM
defvars $0db8
        ubEpr_SubType           ds.b    1
        __ubEpr_FREE_0          ds.b    1       ; NOT USED
        __ubEpr_FirstBank       ds.b    1       ; NOT USED ANYMORE (due to new File Eprom management routines)
        ubEpr_NameLen           ds.b    1
        ubEpr_Fstype            ds.b    1
        pEpr_PrgTable           ds.w    1
        pEpr_Parsedname         ds.w    1
        pEpr_FileHandle         ds.w    1
enddef                                          ; ($0dc3-$0dcf) 13 bytes free

; Printer
defvars $0dd0
        StackBufPtr             ds.w    1
        CtrlBuf                 ds.w    1
        CtrlLen                 ds.b    1
        prtInChar               ds.b    1
        Translations            ds.b    37
        PlaceHolderChar         ds.b    1
        PendingSpaces           ds.b    1
        Rows                    ds.b    1
        PageLen                 ds.b    1
        Flags                   ds.b    1
        AttrUnderline           ds.b    1
        AttrBold                ds.b    1
        AttrExtended            ds.b    1
        AttrItalics             ds.b    1
        AttrSubscript           ds.b    1
        AttrSuperscript         ds.b    1
        AttrAltfont             ds.b    1
        AttrUserdef             ds.b    1
enddef

;       0E10-0EC5       Index
defvars $0E10
        ubIdxPubFlags           ds.b    1
        ubIdxFlags2             ds.b    1
        ubIdxTopProcess         ds.b    1
        ubIdxNProcDisplayed     ds.b    1
        ubIdxTopApplication     ds.b    1
        ubIdxNApplDisplayed     ds.b    1
        ubIdxSelectorPos        ds.b    1
        ubIdxActiveWindow       ds.b    1
        ubIdxErrorCode          ds.b    1
        ubIdxProcRmCount        ds.b    1
        ubIdxDynamicID          ds.b    1
        ubIdxOldProcRmCount     ds.b    1
        pIdxMemHandle           ds.b    2
        pIdxCurrentProcHandle   ds.b    2
        pIdxMyProcHandle        ds.b    2       ; static handle of Index
        pIdxRunProcIX           ds.b    2
        pIdxAutoRunAppl         ds.b    2
        eIdxCliList             ds.b    3
        eIdxProcList            ds.b    3
        eIdxIndexProc           ds.b    3
        eIdxRunProc             ds.b    3
        IdxKeyTable             ds.b    50
        IdxZKeyTable            ds.b    50
        IdxZZKeyTable           ds.b    50
enddef                                          ; free at $0ec6, 8 bytes free here

;$0ece-0fa6     GN calls

defc    uwGnDateLow             =$0ece
defc    uwGnDateMid             =$0ed0
defc    uwGnDateHigh            =$0ed2
defc    GnHwTimeBuf             =$0ed4          ; 5 bytes
defc    GnFnameBuf              =$0ed9          ; 206 bytes
defc    pAlarmList              =$0fa7
                                                ; $0faa-$0fab unused?
defc    uwNextAlarmID           =$0fac

;$0fae-$0fb4    Alarm app data - shouldn't be here

defc    MailDate                =$0fae
defc    ubAlmActiveButton       =$0fb1
defc    ubSelectedAlmPos        =$0fb2
defc    ubNumVisibleAlarms      =$0fb3
defc    ubTopVisibleAlarm       =$0fb4

;$0fbf-$0ffb    Calculator app data - shouldn't be here
;               Note that calculator memories are persistant (because of static permanent sysvars)


defc    ubSerParity             =$0ffc          ; move with the others one SI above
defc    ubSerFlowControl        =$0ffd
defc    cSerXonXoffChar         =$0ffe

defc    MailBoxName             =$1800          ; max 17 bytes
defc    ubMailboxLength         =$1811
defc    MailboxData             =$1812          ; max 64 bytes
defc    ubMailBoxID             =$1852

defc    word_1853               =$1853          ; ???
defc    uwStkEntUsedStkSize     =$1859
defc    pStkTempStkTop          =$185b
defc    stkBottom               =$185d
defc    pStkEntUsedStkBottom    =$1857
defc    unk_1864                =$1864          ; ???

; **************************************************************************************************
;
;       *** END OF SYSTEM RAM VARIABLES ***
;
;       all definitions below should be moved to their own def file, all of them are :
;
;       *** INTERNAL OPERATING SYSTEM USAGE ONLY ***
;
; **************************************************************************************************

; **************************************************************************************************
;       KEYBOARD
; **************************************************************************************************

defc    KEYMAP_BANK             =$08            ; at KeymapTable

;       qualifiers

defc    QUAL_B_SHIFT            =0              ; use these instead of CLM_xxx as these are global
defc    QUAL_B_CTRL             =1
defc    QUAL_B_ALT              =2
defc    QUAL_B_SPECIAL          =3

defc    QUAL_SHIFT              =$01
defc    QUAL_CTRL               =$02
defc    QUAL_ALT                =$04
defc    QUAL_SPECIAL            =$08

;       keyboard
defvars 0
        kbd_rawkey              ds.b    1       ; current key, internal code
        kbd_rlscnt              ds.b    1       ; release counter
        kbd_keyflags            ds.b    1       ; state bits: KB_xxx
        kbd_prevkey             ds.b    1       ; as above for previous key
        kbd_prevrlscnt          ds.b    1
        kbd_prevflags           ds.b    1
        kbd_repeatcnt           ds.b    1       ; repeat counter (bit 7: 0 enabled, 1 disabled)
        kbd_flags               ds.b    1
        kbd_lastkey             ds.b    1       ; used in dead-key handling
        kbd_SIZEOF              ds.b    1
enddef

defc    KBF_B_CAPSE             =0              ; 1-CAPS enable
defc    KBF_B_CAPS              =1              ; 1-caps 0-CAPS
defc    KBF_B_SCAN              =2              ; 1-keybard scan active
defc    KBF_B_BEEP              =3              ; 1-do keyclick
defc    KBF_B_DMND              =4              ; 1-<> down
defc    KBF_B_KEY               =5              ; 1-any (not <>/[]) key down
defc    KBF_B_SQR               =6              ; 1-[] down
defc    KBF_B_LOCKED            =7              ; 1-locked

defc    KMT_MATRIX              =0
defc    KMT_SHIFT               =1
defc    KMT_CAPS                =2
defc    KMT_DIAMOND             =3
defc    KMT_SQUARE              =4
defc    KMT_DEADKEY             =5

defc    QB_SHIFT                =0              ; qualifier bits from GetQual()
defc    QB_DIAMOND              =1
defc    QB_SQUARE               =2

defc    KB_ACTIVE               =0              ; kbd_keyflags / kbd_prevflags bits
defc    KB_HOLD                 =1
defc    KB_RELEASE              =2

defc    K_ACTIVE                =1
defc    K_HOLD                  =2
defc    K_RELEASE               =4

defc    KBF_CAPSE               =$01
defc    KBF_CAPS                =$02
defc    KBF_SCAN                =$04
defc    KBF_BEEP                =$08
defc    KBF_DMND                =$10
defc    KBF_KEY                 =$20
defc    KBF_SQR                 =$40
defc    KBF_LOCKED              =$80

defc    IN_ASPC                 =$B0            ; redundant...
defc    IN_AESC                 =$B4            ; to be erased...
defc    IN_AMEN                 =$B5            ; but some of them are different
defc    IN_AIDX                 =$B6            ; and have to be renamed
defc    IN_AHEL                 =$B7
defc    IN_SQU                  =$B8
defc    IN_DSPC                 =$C0
defc    IN_DESC                 =$C4
defc    IN_DMEN                 =$C5
defc    IN_DIDX                 =$C6
defc    IN_DHEL                 =$C7
defc    IN_DIA                  =$C8
defc    IN_SESC                 =$D4
defc    IN_SMEN                 =$D5
defc    IN_SIDX                 =$D6
defc    IN_SHEL                 =$D7
defc    IN_SHI                  =$D8
defc    IN_ENTER                =$E1            ; !!
defc    IN_TAB0                 =$E2
defc    IN_DELX                 =$E3
defc    IN_MEN                  =$E5
defc    IN_IDX                  =$E6
defc    IN_HLP                  =$E7
defc    IN_CAPS                 =$E8

; **************************************************************************************************
;       SCREEN / WINDOW
; **************************************************************************************************

;       reset definitions

defc    LORES0_BANK_UNEXP       =$21
defc    LORES0_PAGE_UNEXP       =$22
;       LORES0_BANK_EXP         =$24 or $43     ; calculated by the routine
defc    LORES0_PAGE_EXP         =$08

defc    LORES1_BANK             =$08
defc    LORES1_PAGE             =$10

defc    HIRES0_BANK_UNEXP       =$21
defc    HIRES0_PAGE_UNEXP       =$20
;       HIRES0_BANK_EXP         =$24 or $43     ; calculated by the routine
defc    HIRES0_PAGE_EXP         =$00

defc    HIRES1_BANK             =$08
defc    HIRES1_PAGE             =$08            ; cross LORES1 because first $400 is empty
                                                ; starts really at $1400 (first hires char is number $80)
defc    SBF_BANK                =$20            ; to be renamed ($21 in reality)
defc    SBF_PAGE                =$78

;       screen

defc    SBF_ADDRESS             =SBF_PAGE<<8

defc    LCD_ozrow1              =SBF_ADDRESS+$d2
defc    LCD_ozrow2              =LCD_ozrow1+$100
defc    LCD_ozrow3              =LCD_ozrow1+$200
defc    LCD_ozrow4              =LCD_ozrow1+$300
defc    LCD_ozrow5              =LCD_ozrow1+$400
defc    LCD_ozrow6              =LCD_ozrow1+$500
defc    LCD_ozrow7              =LCD_ozrow1+$600
defc    LCD_ozrow8              =LCD_ozrow1+$700

defc    Wd1Frame                =SBF_ADDRESS+$e6

defc    sbf_ActiveWd            =SBF_ADDRESS+$7e7

defvars SBF_ADDRESS+$7e9
        sbf_CtrlPrefix          ds.b    1
        sbf_PrefixSeq           ds.b    1
        sbf_PrefixLen           ds.b    1
        sbf_VDUbuffer           ds.b    1
        sbf_VDU1                ds.b    1
        sbf_VDU2                ds.b    1
        sbf_VDU3                ds.b    1
        sbf_VDU4                ds.b    1
        sbf_VDU5                ds.b    1
        sbf_VDU6                ds.b    1
enddef

;       window - negative offsets

defvars -14
        wdf_f2                  ds.b    1
        wdf_flagsHi             ds.b    1
        wdf_OpenFlags           ds.b    1
        wdf_flagsLo             ds.b    1
        wdf_f6                  ds.b    1       ; !! unused, always zero
        wdf_crsrattr            ds.b    1
        wdf_crsrx               ds.b    1
        wdf_crsry               ds.b    1
        wdf_rmargin             ds.b    1
        wdf_lmargin             ds.b    1
        wdf_endx                ds.b    1
        wdf_endy                ds.b    1
        wdf_startx              ds.b    1
        wdf_starty              ds.b    1
enddef

;       flags lo
defc    WDFL_B_ULINE            =1
defc    WDFL_B_GREY             =2
defc    WDFL_B_FLASH            =3
defc    WDFL_B_REVERSE          =4
defc    WDFL_B_TINY             =6
defc    WDFL_B_BOLD             =7

defc    WDFL_ULINE              =$02
defc    WDFL_GREY               =$04
defc    WDFL_FLASH              =$08
defc    WDFL_REVERSE            =$10
defc    WDFL_TINY               =$40
defc    WDFL_BOLD               =$80

;       flags hi
defc    WDFH_B_HSCROLL          =2
defc    WDFH_B_DELAY            =3
defc    WDFH_B_CAPS             =4
defc    WDFH_B_VSCROLL          =5
defc    WDFH_B_CURSORON         =6
defc    WDFH_B_CURSOR           =7

defc    WDFH_JUSTIFICATION      =$03
defc    WDFH_HSCROLL            =$04
defc    WDFH_DELAY              =$08
defc    WDFH_CAPS               =$10
defc    WDFH_VSCROLL            =$20
defc    WDFH_CURSORON           =$40
defc    WDFH_CURSOR             =$80

;       flags f2 f4(fo)

defc    WDF2_B_INITIALIZED      =7      ; other bits unused


defc    WDFO_B_BORDERS          =0      ; left/right vertical bars
defc    WDFO_B_BRACKETS         =1      ; shelf brackets
defc    WDFO_B_UNGREY           =3      ; set during -G cls
defc    WDFO_B_GREY             =4      ; set during +G cls
defc    WDFO_B_5                =5
defc    WDFO_B_6                =6

;       LCD hardware attributes

defc    LCDA_B_CH8              =0
defc    LCDA_B_UNDERLINE        =1
defc    LCDA_B_GREY             =2
defc    LCDA_B_FLASH            =3
defc    LCDA_B_REVERSE          =4
defc    LCDA_B_HIRES            =5
defc    LCDA_B_TINY             =7

defc    LCDA_CH8                =$01
defc    LCDA_UNDERLINE          =$02
defc    LCDA_GREY               =$04
defc    LCDA_FLASH              =$08
defc    LCDA_REVERSE            =$10
defc    LCDA_HIRES              =$20
defc    LCDA_TINY               =$80    ; software flag

defc    LCDA_SPECMASK           =$3C
defc    LCDA_NULLCHAR           =$34
defc    LCDA_LORESCURSOR        =$38



; **************************************************************************************************
;       DOR
; **************************************************************************************************

;       application DOR offsets

defvars 0
        DOR_PARENT              ds.p    1       ; $00
        DOR_BROTHER             ds.p    1       ; $03
        DOR_SON                 ds.p    1       ; $06
        DOR_TYPE                ds.b    1       ; $09
        DOR_LENGTH              ds.b    1       ; $0a
        ADOR_INFOTYPE           ds.b    1       ; $0b
        ADOR_INFOLENGTH         ds.b    1       ; $0c
        ADOR_RESERVED           ds.b    2       ; $0d
        ADOR_APPKEY             ds.b    1       ; $0f
        ADOR_BADSIZE            ds.b    1       ; $10
        ADOR_ENVSIZE            ds.w    1       ; $11
        ADOR_UNSAFE             ds.w    1       ; $13
        ADOR_SAFE               ds.w    1       ; $15
        ADOR_ENTRY              ds.w    1       ; $17
        ADOR_BINDINGS           ds.b    4       ; $19
        ADOR_FLAGS              ds.b    1       ; $1d
        ADOR_FLAGS2             ds.b    1       ; $1e
        ADOR_HELPTYPE           ds.b    1       ; $1f
        ADOR_HELPLENGTH         ds.b    1       ; $20
        ADOR_TOPICS             ds.p    1       ; $21
        ADOR_COMMANDS           ds.p    1       ; $24
        ADOR_HELP               ds.p    1       ; $27
        ADOR_TOKENS             ds.p    1       ; $2a
        ADOR_NAMETYPE           ds.b    1       ; $2d
        ADOR_NAMELENGTH         ds.b    1       ; $2e
        ADOR_NAME               ds.b    1       ; $2f
enddef

;       application type

defc    AT_B_Boot               =7
defc    AT_B_Draw               =5
defc    AT_B_Popd               =3

;       mth

defc    CMDF_B_COLUMN           =0
defc    TPCF_B_AN               =0              ; unused? if so, there's error in docs
defc    TPCF_B_INFO             =1
defc    CMDF_B_HIDDEN           =2
defc    CMDF_B_SAFE             =3
defc    CMDF_B_HELP             =4

defc    CMDF_HELP               =$10

; **************************************************************************************************
;       HANDLE
; **************************************************************************************************

; handle types:

     defc HND_DEV  = $01           ;device 
     defc HND_FILE = $02           ;file/directory
     defc HND_MEM  = $03           ;memory 
     defc HND_PROC = $04           ;process
     defc HND_ALRM = $05           ;alarm
     defc HND_TRHN = $06           ;tri-handle
     defc HND_TEMP = $FA           ;temporary
     defc HND_SER  = $FB           ;serial port

     defc HND_B_DEV = 0


;       generic handle

defc    hnd_Next                =$00            ; 00-03 always same
defc    hnd_Type                =$02
defc    hnd_DynID               =$03
defc    hnd_Flags               =$0a            ; 0A-0D semi-standard
defc    hnd_L                   =$0b
defc    hnd_H                   =$0c
defc    hnd_Bank                =$0d

;       device handle

defc    dhnd_flags              =$0A
defc    dhnd_DOR                =$0B
defc    dhnd_DORH               =$0C
defc    dhnd_DORBank            =$0D
defc    dhnd_AppSlot            =$0E
defc    dhnd_DeviceID           =$0F

;       file handle

defc    fhnd_firstblk           =$04
defc    fhnd_firstblk_h         =$05
defc    fhnd_filepos            =$06
defc    fhnd_filepos_h          =$07
defc    fhnd_filepos_lo         =$08
defc    fhnd_attr               =$09
defc    fhnd_flags              =$0a
defc    fhnd_Bank               =$0d

defc    FATR_B_READABLE         =0
defc    FATR_B_WRITABLE         =1
defc    FATR_B_MEMORY           =2

defc    FATR_READABLE           =$01
defc    FATR_WRITABLE           =$02
defc    FATR_MEMORY             =$04
defc    FATR_SLOT               =$18            ; two bits

defc    FFLG_B_SPECDEV          =1
defc    FFLG_B_WRERROR          =2

defc    FSBLOCK_SIZE            =$3e

;       MemHandle

defc    mhnd_AllocFlags         =$04            ; flags used in OS_Mop
defc    mhnd_ExclusiveBank      =$05
defc    mhnd_Slot0              =$08            ; PageN of first allocation for each slot
defc    mhnd_Slot1              =$0A
defc    mhnd_Slot2              =$0C
defc    mhnd_Slot3              =$0E

;       alarm handle

defc    ahnd_NextAlarmL         =$04
defc    ahnd_NextAlarmH         =$05
defc    ahnd_Flags              =$06
defc    ahnd_Date               =$07
defc    ahnd_DateM              =$08
defc    ahnd_DateH              =$09
defc    ahnd_Time               =$0A
defc    ahnd_TimeM              =$0B
defc    ahnd_TimeH              =$0C
defc    ahnd_Func               =$0D            ; BHL

defc    AHNF_B_ACTIVE           =7

;       serial handle

defc    shnd_RxBuf              =$08
defc    shnd_TxBuf              =$0a
defc    shnd_Timeout            =$0c

;       TriHandle

defc    thnd_Segment            =$04
defc    thnd_AddrH              =$05
defc    thnd_Bank               =$06
defc    thnd_SubType            =$07

lston
