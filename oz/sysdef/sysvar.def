lstoff

; **************************************************************************************************
; OZ System definitions
;
; This file is part of the Z88 operating system, OZ      0000000000000000      ZZZZZZZZZZZZZZZZZZZ
;                                                       000000000000000000   ZZZZZZZZZZZZZZZZZZZ
; OZ is free software; you can redistribute it and/    0000            0000              ZZZZZ
; or modify it under the terms of the GNU General      0000            0000            ZZZZZ
; Public License as published by the Free Software     0000            0000          ZZZZZ
; Foundation; either version 2, or (at your option)    0000            0000        ZZZZZ
; any later version. OZ is distributed in the hope     0000            0000      ZZZZZ
; that it will be useful, but WITHOUT ANY WARRANTY;    0000            0000    ZZZZZ
; without even the implied warranty of MERCHANTA-       000000000000000000   ZZZZZZZZZZZZZZZZZZZZ
; BILITY or FITNESS FOR A PARTICULAR PURPOSE. See        0000000000000000  ZZZZZZZZZZZZZZZZZZZZ
; the GNU General Public License for more details.
; You should have received a copy of the GNU General Public License along with OZ; see the file
; COPYING. If not, write to:
;                                  Free Software Foundation, Inc.
;                                  59 Temple Place-Suite 330,
;                                  Boston, MA 02111-1307, USA.
;
; $Id$
;***************************************************************************************************


;       variable prefix:
;
;       a       ASCII string
;       c       character code
;       p       pointer (16 bits)
;       e       extended pointer (24 bits)
;       f       float (40 bits)
;
;       sl      signed long (32 bits)
;       ul      unsigned long (32 bits)
;       sw      signed word (16 bits)
;       uw      unsigned word (16 bits)
;       sb      signed byte (8 bits)
;       ub      unsigned byte (8 bits)
;

; Constants are all uppercase

defc    OZVERSION               =4

;       01E0-01FF           Preserved system area (32 bytes preserved over a soft reset)

defc    PreservedArea           =$01E0

defvars PreservedArea
        ubCountry               ds.b    1       ; for future use
        ubTimeBufferSelect      ds.b    1       ; select time buffer A or B (was $2100A0)
        ubTIM0_A                ds.b    1       ; buffer A : TIM0-4 (was $00A1-$00A5)
        ubTIM1_A                ds.b    1
        ubTIM2_A                ds.b    1
        ubTIM3_A                ds.b    1
        ubTIM4_A                ds.b    1
        ubTIM0_B                ds.b    1       ; buffer B : TIM0-4 (was $00A6-$00AA)
        ubTIM1_B                ds.b    1
        ubTIM2_B                ds.b    1
        ubTIM3_B                ds.b    1
        ubTIM4_B                ds.b    1
        uwSysDateLow            ds.w    1       ; 11 bytes buffer for system time
        uwSysDateMid            ds.w    1
        uwSysDateHigh           ds.w    1
        SysTimeBuffer           ds.b    5
enddef                                          ; 10 bytes are left in this area

;       0200-03FF           System variable area

defc    ubResetType             =$0200
defc    ubTimeout               =$0201
defc    ubRepeat                =$0202
defc    cKeyclick               =$0203
defc    cSound                  =$0204
defc    ubBadSize               =$0205
defc    ubScreenBase            =$020b
defc    KbdData                 =$0216          ; data on both negative and positive side
defc    SerTXHandle             =$0229          ; on negative side!
defc    SerRXHandle             =$0233          ; on negative side!
defc    ubFsTemp                =$0237
defc    uwSmallTimer            =$0238
defc    uwSlotAvailFsBlocks     =$023a          ; ds.b 4*2
defc    pFsMemPool              =$0244
defc    uwFsAvailBlock          =$0246
defc    word_024A               =$024a          ; used in nqsp.asm
defc    pMTHScreenSave          =$024e
defc    pMTHHelpHandle          =$0250
defc    word_0252               =$0252          ; used in nqsp.asm
defc    uwPanelFilePtr          =$0256
defc    ubSysFlags1             =$0258
defc    cExtendedChar           =$0259
defc    OZcmdBuf                =$025a
defc    pNMIStackPtr            =$0260
defc    ubWaitCount1            =$0262
defc    ubWaitCount2            =$0263
defc    ubTimeoutCnt            =$0264
defc    ubCLIActiveCnt          =$0265
defc    ubNextAlmSeconds        =$0266
defc    uwNextAlmMinutes        =$0267
defc    ubNextAlmMinutesB       =$0269
defc    ubSoundActive           =$026a
defc    ubSoundCount            =$026b
defc    ubAlmDisableCnt         =$026e
defc    ubAlmDisplayCnt         =$026f
defc    ubNumActiveAlm          =$0270
defc    ubAlmActionCnt          =$0271
defc    pFirstAlarm             =$0272
defc    pNextAlmHandle          =$0274
defc    pPrefs1                 =$0276
defc    pPrefs2                 =$0278
defc    ulSlot1ID               =$027b
defc    ulSlot2ID               =$027f
defc    ulSlot3ID               =$0283
defc    ubHlpActiveCmd          =$0287
defc    ubHlpActiveTpc          =$0288
defc    ubHlpActiveHelp         =$0289
defc    ubHlpActiveApp          =$028a
defc    eHlpAppDOR              =$028c
defc    eHlpTopics              =$028f
defc    eHlpCommands            =$0292
defc    eHlpHelp                =$0295
defc    eHlpTokens              =$0298
defc    ActiveAppHandle         =$029b          ; actual handle structure
defc    uwOSTinTimeout          =$02ab
defc    pOSEntHandle            =$02ad
                                                ; $02af-$03af is a system page

;       uwAppStaticHnd-(pAppEnvHandle-1) is cleared when new app is created

defc    uwAppStaticHnd          =$03b0
defc    ubAppDynID              =$03b2
defc    ubAppResCycle           =$03b3
defc    pAppEntrypoint          =$03b4
defc    ubAppDORFlags           =$03b6
defc    ubAppDORFlags2          =$03b7
defc    uwAppEnvOverhead        =$03b8
defc    pAppStackPtr            =$03ba
defc    pAppUnSafeArea          =$03bc
defc    pAppBadMemTable         =$03be
defc    pAppBadMemHandle        =$03c0
defc    ubAppContRAM            =$03c2
defc    ubAppBindings           =$03c3
defc    ubAppKbdBits            =$03c7
defc    pMailbox                =$03c8
defc    ubMailboxSize           =$03ca
defc    pAppErrorHandler        =$03cc
defc    ubAppLastError          =$03ce
defc    ubAppCallLevel          =$03cf
defc    ubOldCallLevel          =$03d0
defc    pAppHelpHandle          =$03d1
defc    ubAppHelpBank           =$03d3
defc    eAppDOR_2               =$03d4
defc    eAppTopics_2            =$03d7
defc    eAppCommands_2          =$03da
defc    eAppHelp_2              =$03dd
defc    eAppTokens_2            =$03e0

defc    pAppEnvHandle           =$03f0
defc    uwFreeRAMPages          =$03f2
defc    pFirstHandle            =$03f4
defc    ubIntTaskToDo           =$03f6
defc    ubIntStatus             =$03f7
defc    ubSlotRamSize           =$03fc
defc    ubSlotRAMoffset         =$03f8

;       0400-04ff       hardware ports (see blink.def)

; *** TEMPORARY HACK *** WE NEED SPACE ***

defc    RandomPointers          =$0400
defvars RandomPointers
        ubRandomPtr             ds.b    1
        uwRandom1               ds.w    1
        uwRandom2               ds.w    1
enddef

defc    KeymapTblPtrs           =$0405
defvars KeymapTblPtrs
        km_bank                 ds.b    1       ; memory bank where tables are, bound in S2
        km_page                 ds.b    1       ; high byte of address
        km_diamond              ds.b    1       ; low byte of <> translation table address
        km_square               ds.b    1       ; low byte of [] translation table address
        km_deadkey              ds.b    1       ; low byte of deadkey table address
        km_deadchar             ds.b    1       ; char displayed in OZ window
        km_deadsub              ds.b    1       ; offset to list for current deadkey
enddef

;       0500-0aff       handles

defc    HANDLES                 =$0500
defc    NUMHANDLES              =6*16


;       0b00-0bff       buffers

defc    KbdBuffer               =$0b00
defc    SerTXBuffer             =$0b20
defc    SerRXBuffer             =$0b80

;       0c00            NMI/wait

defc    uwTimecounter           =$0c00
defc    ubTimecounterSoft       =$0c02
defc    NMIStackTop             =$0c33

;       0db8-0dc2       EPROM

defc    ubEpr_SubType           =$0db8
                                                ; $0db9 unused
defc    ubEpr_FirstBank         =$0dba          ; relative to end
defc    ubEpr_NameLen           =$0dbb
defc    ubEpr_Fstype            =$0dbc
defc    pEpr_PrgTable           =$0dbd
defc    pEpr_Parsedname         =$0dbf
defc    pEpr_FileHandle         =$0dc1

;       0dd0-0e07       Printer


;       0e10-0ec9       Index

defc    ubIdxPubFlags           =$0e10          ; was Flags1
defc    ubIdxFlags2             =$0e11
defc    ubIdxTopProcess         =$0e12
defc    ubIdxNProcDisplayed     =$0e13
defc    ubIdxTopApplication     =$0e14
defc    ubIdxNApplDisplayed     =$0e15
defc    ubIdxSelectorPos        =$0e16
defc    ubIdxActiveWindow       =$0e17
defc    Byte_0E18               =$0e18          ; !! unused
defc    ubIdxErrorCode          =$0e19
defc    ubIdxProcRmCount        =$0e1a
defc    ubIdxDynamicID          =$0e1b
defc    ubIdxOldProcRmCount     =$0e1c
defc    byte_0E1D               =$0e1d          ; !! written to once but unused in Index/DC
defc    pIdxMemHandle           =$0e1e
defc    pIdxCurrentProcHandle   =$0e20
defc    pIdxMyProcHandle        =$0e22          ; static handle of Index
defc    pIdxRunProcIX           =$0e24
defc    pIdxAutoRunAppl         =$0e26
defc    eIdxCliList             =$0e28
defc    eIdxProcList            =$0e2b
defc    eIdxIndexProc           =$0e2e
defc    eIdxRunProc             =$0e31
defc    IdxKeyTable             =$0e34
defc    IdxZKeyTable            =$0e66
defc    IdxZZKeyTable           =$0e98
                                ;$0eca

;$0ece-0fa6     GN calls

defc    uwGnDateLow             =$0ece
defc    uwGnDateMid             =$0ed0
defc    uwGnDateHigh            =$0ed2
defc    GnHwTimeBuf             =$0ed4          ; 5 bytes
defc    GnFnameBuf              =$0ed9          ; 206 bytes
defc    pAlarmList              =$0fa7
                                                ; $0faa-$0fab unused?
defc    uwNextAlarmID           =$0fac

;$0fae-$0fb4    Alarm app data - shouldn't be here

defc    MailDate                =$0fae
defc    ubAlmActiveButton       =$0fb1
defc    ubSelectedAlmPos        =$0fb2
defc    ubNumVisibleAlarms      =$0fb3
defc    ubTopVisibleAlarm       =$0fb4

;$0fbf-$0ffb    Calculator app data - shouldn't be here


defc    ubSerParity             =$0ffc
defc    ubSerFlowControl        =$0ffd
defc    cSerXonXoffChar         =$0ffe

defc    MailBoxName             =$1800          ; max 17 bytes
defc    ubMailboxLength         =$1811
defc    MailboxData             =$1812          ; max 64 bytes
defc    ubMailBoxID             =$1852

defc    MBOXNAMEMAXLEN          =17
defc    MAILBOXMAXLEN           =64
defc    MAILBOXID               =$aa


defc    word_1853               =$1853
defc    uwStkEntUsedStkSize     =$1859
defc    pStkTempStkTop          =$185b
defc    stkBottom               =$185d
defc    pStkEntUsedStkBottom    =$1857
defc    unk_1864                =$1864

;       ubIdxPubFlags

defc    IDXF1_B_INSIDEOZ        =0              ; inside OS_In
defc    IDXF1_B_INIT            =1              ; need init

defc    IDXF1_INSIDEOS          =$01
defc    IDXF1_INIT              =$02

;       qualifiers

defc    QUAL_B_SHIFT            =0              ; use these instead of CLM_xxx as these are global
defc    QUAL_B_CTRL             =1
defc    QUAL_B_ALT              =2
defc    QUAL_B_SPECIAL          =3

defc    QUAL_SHIFT              =$01
defc    QUAL_CTRL               =$02
defc    QUAL_ALT                =$04
defc    QUAL_SPECIAL            =$08

;       ubIntStatus

defc    IST_B_CLISHIFT          =0
defc    IST_B_CLIDMND           =1
defc    IST_B_2                 =2              ; selects which prefs pointer to use
defc    IST_B_HASPREFS          =3
defc    IST_B_ALARM             =4
defc    IST_B_ALMTIMEOK         =5              ; time until next alarm is valid
defc    IST_B_BATLOW            =6              ; show 'bat low' indicator

defc    IST_CLISHIFT            =$01
defc    IST_CLIDMND             =$02
defc    IST_ALARM               =$10
defc    IST_ALMTIMEOK           =$20
defc    IST_BATLOW              =$40

;       ubIntTaskToDo

defc    ITSK_B_BUFFER           =0
defc    ITSK_B_TIMER            =1
defc    ITSK_B_SHUTDOWN         =2
defc    ITSK_B_PREEMPTION       =3
defc    ITSK_B_ESC              =4
defc    ITSK_B_ALARM            =5
defc    ITSK_B_OZWINDOW         =7

defc    ITSK_BUFFER             =$01
defc    ITSK_TIMER              =$02
defc    ITSK_SHUTDOWN           =$04
defc    ITSK_PREEMPTION         =$08
defc    ITSK_ESC                =$10
defc    ITSK_ALARM              =$20
defc    ITSK_OZWINDOW           =$80

;       ubSysFlags1

defc    SF1_B_0                 =0
defc    SF1_B_1                 =1
defc    SF1_B_INPUTPENDING      =2
defc    SF1_B_XTNDCHAR          =3
defc    SF1_B_OZDMND            =4
defc    SF1_B_OZSQUARE          =5
defc    SF1_B_6                 =6
defc    SF1_B_NOTOKENS          =7

defc    SF1_OZDMND              =$10
defc    SF1_OZSQUARE            =$20


;       printer filter

defc    PrtSeqPrefix            =$7ee9
defc    PrtSequence             =$7eea
defc    PrtSeqBuf               =$7eec


;       screen/window related

defc    SBF_BANK                =$21
defc    SBF_PAGE                =$78

defc    SBF_ADDRESS             =SBF_PAGE<<8

defc    LCD_ozrow1              =SBF_ADDRESS+$d2
defc    LCD_ozrow2              =LCD_ozrow1+$100
defc    LCD_ozrow3              =LCD_ozrow1+$200
defc    LCD_ozrow4              =LCD_ozrow1+$300
defc    LCD_ozrow5              =LCD_ozrow1+$400
defc    LCD_ozrow6              =LCD_ozrow1+$500
defc    LCD_ozrow7              =LCD_ozrow1+$600
defc    LCD_ozrow8              =LCD_ozrow1+$700

defc    Wd1Frame                =SBF_ADDRESS+$e6

defc    sbf_ActiveWd            =SBF_ADDRESS+$7e7

defvars SBF_ADDRESS+$7e9
        sbf_CtrlPrefix          ds.b    1
        sbf_PrefixSeq           ds.b    1
        sbf_PrefixLen           ds.b    1
        sbf_VDUbuffer           ds.b    1
        sbf_VDU1                ds.b    1
        sbf_VDU2                ds.b    1
        sbf_VDU3                ds.b    1
        sbf_VDU4                ds.b    1
        sbf_VDU5                ds.b    1
        sbf_VDU6                ds.b    1
enddef

;       window - negative offsets

defvars -14
        wdf_f2                  ds.b    1
        wdf_flagsHi             ds.b    1
        wdf_OpenFlags           ds.b    1
        wdf_flagsLo             ds.b    1
        wdf_f6                  ds.b    1       ; !! unused, always zero
        wdf_crsrattr            ds.b    1
        wdf_crsrx               ds.b    1
        wdf_crsry               ds.b    1
        wdf_rmargin             ds.b    1
        wdf_lmargin             ds.b    1
        wdf_endx                ds.b    1
        wdf_endy                ds.b    1
        wdf_startx              ds.b    1
        wdf_starty              ds.b    1
enddef

;       flags lo
defc    WDFL_B_ULINE            =1
defc    WDFL_B_GREY             =2
defc    WDFL_B_FLASH            =3
defc    WDFL_B_REVERSE          =4
defc    WDFL_B_TINY             =6
defc    WDFL_B_BOLD             =7

defc    WDFL_ULINE              =$02
defc    WDFL_GREY               =$04
defc    WDFL_FLASH              =$08
defc    WDFL_REVERSE            =$10
defc    WDFL_TINY               =$40
defc    WDFL_BOLD               =$80

;       flags hi
defc    WDFH_B_HSCROLL          =2
defc    WDFH_B_DELAY            =3
defc    WDFH_B_CAPS             =4
defc    WDFH_B_VSCROLL          =5
defc    WDFH_B_CURSORON         =6
defc    WDFH_B_CURSOR           =7

defc    WDFH_JUSTIFICATION      =$03
defc    WDFH_HSCROLL            =$04
defc    WDFH_DELAY              =$08
defc    WDFH_CAPS               =$10
defc    WDFH_VSCROLL            =$20
defc    WDFH_CURSORON           =$40
defc    WDFH_CURSOR             =$80

;       flags f2 f4(fo)

defc    WDF2_B_INITIALIZED      =7      ; other bits unused


defc    WDFO_B_BORDERS          =0      ; left/right vertical bars
defc    WDFO_B_BRACKETS         =1      ; shelf brackets
defc    WDFO_B_UNGREY           =3      ; set during -G cls
defc    WDFO_B_GREY             =4      ; set during +G cls
defc    WDFO_B_5                =5
defc    WDFO_B_6                =6

;       LCD hardware attributes

defc    LCDA_B_CH8              =0
defc    LCDA_B_UNDERLINE        =1
defc    LCDA_B_GREY             =2
defc    LCDA_B_FLASH            =3
defc    LCDA_B_REVERSE          =4
defc    LCDA_B_HIRES            =5
defc    LCDA_B_TINY             =7

defc    LCDA_CH8                =$01
defc    LCDA_UNDERLINE          =$02
defc    LCDA_GREY               =$04
defc    LCDA_FLASH              =$08
defc    LCDA_REVERSE            =$10
defc    LCDA_HIRES              =$20
defc    LCDA_TINY               =$80    ; software flag

defc    LCDA_SPECMASK           =$3C
defc    LCDA_NULLCHAR           =$34
defc    LCDA_LORESCURSOR        =$38


;       (application) DOR offsets

defvars 0
        DOR_PARENT              ds.p    1       ; $00
        DOR_BROTHER             ds.p    1       ; $03
        DOR_SON                 ds.p    1       ; $06
        DOR_TYPE                ds.b    1       ; $09
        DOR_LENGTH              ds.b    1       ; $0a
        ADOR_INFOTYPE           ds.b    1       ; $0b
        ADOR_INFOLENGTH         ds.b    1       ; $0c
        ADOR_RESERVED           ds.b    2       ; $0d
        ADOR_APPKEY             ds.b    1       ; $0f
        ADOR_BADSIZE            ds.b    1       ; $10
        ADOR_ENVSIZE            ds.w    1       ; $11
        ADOR_UNSAFE             ds.w    1       ; $13
        ADOR_SAFE               ds.w    1       ; $15
        ADOR_ENTRY              ds.w    1       ; $17
        ADOR_BINDINGS           ds.b    4       ; $19
        ADOR_FLAGS              ds.b    1       ; $1d
        ADOR_FLAGS2             ds.b    1       ; $1e
        ADOR_HELPTYPE           ds.b    1       ; $1f
        ADOR_HELPLENGTH         ds.b    1       ; $20
        ADOR_TOPICS             ds.p    1       ; $21
        ADOR_COMMANDS           ds.p    1       ; $24
        ADOR_HELP               ds.p    1       ; $27
        ADOR_TOKENS             ds.p    1       ; $2a
        ADOR_NAMETYPE           ds.b    1       ; $2d
        ADOR_NAMELENGTH         ds.b    1       ; $2e
        ADOR_NAME               ds.b    1       ; $2f
enddef

defc    CMDF_B_COLUMN           =0
defc    TPCF_B_AN               =0              ; unused? if so, there's error in docs
defc    TPCF_B_INFO             =1
defc    CMDF_B_HIDDEN           =2
defc    CMDF_B_SAFE             =3
defc    CMDF_B_HELP             =4

defc    CMDF_HELP               =$10

defvars 0
        OSFrame_IY              ds.w    1       ; $00
        OSFrame_S2              ds.b    1       ; $02
        OSFrame_S3              ds.b    1       ; $03
        OSFrame_OZCall          ds.w    1       ; $04
        OSFrame_F               ds.b    1       ; $06
        OSFrame_A               ds.b    1       ; $07
        OSFrame_C               ds.b    1       ; $08
        OSFrame_B               ds.b    1       ; $09
        OSFrame_E               ds.b    1       ; $0A
        OSFrame_D               ds.b    1       ; $0B
        OSFrame_L               ds.b    1       ; $0C
        OSFrame_H               ds.b    1       ; $0D
        OSFrame__S2             ds.b    1       ; $0E
        OSFrame__S3             ds.b    1       ; $0F
enddef

; Z80 flags SZ-H-PNC

defc    Z80F_B_C                =0
defc    Z80F_B_N                =1
defc    Z80F_B_V                =2
defc    Z80F_B_P                =2
defc    Z80F_B_H                =4
defc    Z80F_B_Z                =6
defc    Z80F_B_S                =7

defc    Z80F_C                  =$01
defc    Z80F_N                  =$02
defc    Z80F_V                  =$04
defc    Z80F_P                  =$04
defc    Z80F_H                  =$10
defc    Z80F_Z                  =$40
defc    Z80F_S                  =$80



;       buffer  !! remove unused bytes, size drops to 5 bytes

defvars -10
        buf_f6                  ds.b    1       ; $F6
        buf_func                ds.b    1       ; $F7
        buf_funcH               ds.w    1       ; $F8
        buf_end                 ds.b    1       ; $FA
        buf_start               ds.b    1       ; $FB
        buf_bufpage             ds.b    1       ; $FC
        buf_fd                  ds.b    1       ; $FD unused
        buf_wrpos               ds.b    1       ; $FE
        buf_rdpos               ds.b    1       ; $FF
enddef


;       handle types

defc    HND_DEV                 =1
defc    HND_FILE                =2
defc    HND_MEM                 =3
defc    HND_PROC                =4
defc    HND_ALRM                =5
defc    HND_TRHN                =6
defc    HND_TEMP                =250

;       generic handle

defc    hnd_Next                =$00            ; 00-03 always same
defc    hnd_Type                =$02
defc    hnd_DynID               =$03
defc    hnd_Flags               =$0a            ; 0A-0D semi-standard
defc    hnd_L                   =$0b
defc    hnd_H                   =$0c
defc    hnd_Bank                =$0d
defc    hnd_SIZEOF              =$10

defc    HNDF_B_DEV              =0

;       device handle

defc    dhnd_flags              =$0A
defc    dhnd_DOR                =$0B
defc    dhnd_DORH               =$0C
defc    dhnd_DORBank            =$0D
defc    dhnd_AppSlot            =$0E
defc    dhnd_DeviceID           =$0F

;       file handle

defc    fhnd_firstblk           =$04
defc    fhnd_firstblk_h         =$05
defc    fhnd_filepos            =$06
defc    fhnd_filepos_h          =$07
defc    fhnd_filepos_lo         =$08
defc    fhnd_attr               =$09
defc    fhnd_flags              =$0a
defc    fhnd_Bank               =$0d

defc    FATR_B_READABLE         =0
defc    FATR_B_WRITABLE         =1
defc    FATR_B_MEMORY           =2

defc    FATR_READABLE           =$01
defc    FATR_WRITABLE           =$02
defc    FATR_MEMORY             =$04
defc    FATR_SLOT               =$18            ; two bits

defc    FFLG_B_SPECDEV          =1
defc    FFLG_B_WRERROR          =2

defc    FSBLOCK_SIZE            =$3e

;       MemHandle

defc    mhnd_AllocFlags         =$04            ; flags used in OS_Mop
defc    mhnd_ExclusiveBank      =$05
defc    mhnd_Slot0              =$08            ; PageN of first allocation for each slot
defc    mhnd_Slot1              =$0A
defc    mhnd_Slot2              =$0C
defc    mhnd_Slot3              =$0E

;       alarm handle

defc    ahnd_NextAlarmL         =$04
defc    ahnd_NextAlarmH         =$05
defc    ahnd_Flags              =$06
defc    ahnd_Date               =$07
defc    ahnd_DateM              =$08
defc    ahnd_DateH              =$09
defc    ahnd_Time               =$0A
defc    ahnd_TimeM              =$0B
defc    ahnd_TimeH              =$0C
defc    ahnd_Func               =$0D            ; BHL

defc    ALMF_B_ACTIVE           =7

;       serial handle

defc    shnd_RxBuf              =$08
defc    shnd_TxBuf              =$0a
defc    shnd_Timeout            =$0c

;       TriHandle

defc    thnd_Segment            =$04
defc    thnd_AddrH              =$05
defc    thnd_Bank               =$06
defc    thnd_SubType            =$07

;       ----

defvars 0
        alm_Next                ds.p    1       ; $00
        alm_Time                ds.b    3       ; $03
        alm_Date                ds.b    3       ; $06
        alm_Reason              ds.b    24      ; $09
        alm_RepeatDays          ds.b    3       ; $21
        alm_RepeatTime          ds.b    3       ; $24
        alm_RepeatNum           ds.w    1       ; $27
        alm_RepeatFlags         ds.b    1       ; $29
        alm_Flags               ds.b    1       ; $2a
        alm_Handle              ds.w    1       ; $2b
        alm_ID                  ds.w    1       ; $2d
        alm_SIZEOF              ds.b    1       ; $2f
enddef

;       !! WARNING !!   ALMF already used for alarm handle
;                       need to rename one or other

defc    ALMF_B_BELL             =0
defc    ALMF_B_EXECUTE          =1
defc    ALMF_B_SHOWBELL         =2
defc    ALMF_B_ADDED            =3

defc    ALMF_BELL               =$01
defc    ALMF_EXECUTE            =$02
defc    ALMF_SHOWBELL           =$04
defc    ALMF_ADDED              =$08

defc    ALRF_B_SEC              =0
defc    ALRF_B_MIN              =1
defc    ALRF_B_HOUR             =2
defc    ALRF_B_DAY              =3
defc    ALRF_B_WEEK             =4
defc    ALRF_B_MONTH            =5
defc    ALRF_B_YEAR             =6
defc    ALRF_B_NEVER            =7

defc    ALRF_SEC                =$01
defc    ALRF_MIN                =$02
defc    ALRF_HOUR               =$04
defc    ALRF_DAY                =$08
defc    ALRF_WEEK               =$10
defc    ALRF_MONTH              =$20
defc    ALRF_YEAR               =$40
defc    ALRF_NEVER              =$80

;       ----

;       memory related

;       out-of-memory flags

defc    OOM_B_NORMAL            =0
defc    OOM_B_FIXED             =1

defc    OOM_NORMAL              =$01
defc    OOM_FIXED               =$02

;       MAT entry flags

defc    MAT_B_SYSTEM            =0              ; this 'flag' in low byte!
defc    MAT_B_LAST              =4
defc    MAT_B_FULL              =5
defc    MAT_B_ALLOCFIXED        =6
defc    MAT_B_SWAP              =7
defc    MAT_SYSTEM              =$01            ; this 'flag' in low byte!
defc    MAT_LAST                =$10
defc    MAT_FULL                =$20
defc    MAT_ALLOCFIXED          =$40
defc    MAT_SWAP                =$80

;       allocation flag bit defines - should be in memory.def

defc    MM_B_FIX                =1
defc    MM_B_SLT                =2
defc    MM_B_MUL                =5

;       slot type from VerifySlotType

defc    ST_NOROM                =0
defc    ST_EPROM                =1
defc    ST_APPLROM              =2

defc    ST_B_EPROM              =0
defc    ST_B_APPLROM            =1


;       kernel module banks

defc    ROMSIZE                 =16             ; now OZ fits in a 256K ROM

defc    OZBANK_0        =0
defc    OZBANK_DC       =2
defc    OZBANK_RS232    =2
defc    OZBANK_FPP      =2
defc    OZBANK_GN       =3
defc    OZBANK_PRFILTER =3
defc    OZBANK_7        =7
defc    BANK_MTH                =$0F            ; OZ static structures

defc    OZCALLTBL               =$ff00
defc    GNCALLTBL               =$8000          ; GN/DC tables at same address,
defc    DCCALLTBL               =$8000          ; change CallGN/CallDC if changed
defc    FPPCALLTBL              =$D800


;       should get rid of these later - most likely when they are moved into main banks

defc    PrntChar                =$afc0
defc    PrntCtrlSeq             =$afc3
defc    PrntInit                =$afc6

defc    RS232code               =$a500



;       keyboard
defvars 0
        kbd_rawkey              ds.b    1       ; current key, internal code
        kbd_rlscnt              ds.b    1       ; release counter
        kbd_keyflags            ds.b    1       ; state bits: KB_xxx
        kbd_prevkey             ds.b    1       ; as above for previous key
        kbd_prevrlscnt          ds.b    1
        kbd_prevflags           ds.b    1
        kbd_repeatcnt           ds.b    1       ; repeat counter
        kbd_flags               ds.b    1
        kbd_lastkey             ds.b    1       ; used in dead-key handling
        kbd_SIZEOF              ds.b    1
enddef

defc    KBF_B_CAPSE             =0              ; 1-CAPS enable
defc    KBF_B_CAPS              =1              ; 1-caps 0-CAPS
defc    KBF_B_SCAN              =2              ; 1-keybard scan active
defc    KBF_B_BEEP              =3              ; 1-do keyclick
defc    KBF_B_DMND              =4              ; 1-<> down
defc    KBF_B_KEY               =5              ; 1-any (not <>/[]) key down
defc    KBF_B_SQR               =6              ; 1-[] down
defc    KBF_B_LOCKED            =7              ; 1-locked

defc    KMT_MATRIX              =0
defc    KMT_SHIFT               =1
defc    KMT_DIAMOND             =2
defc    KMT_SQUARE              =3
defc    KMT_DEADKEY             =4

defc    QB_SHIFT                =0              ; qualifier bits from GetQual()
defc    QB_DIAMOND              =1
defc    QB_SQUARE               =2

defc    KB_ACTIVE               =0              ; kbd_keyflags / kbd_prevflags bits
defc    KB_HOLD                 =1
defc    KB_RELEASE              =2

defc    K_ACTIVE                =1
defc    K_HOLD                  =2
defc    K_RELEASE               =4

defc    KBF_CAPSE               =$01
defc    KBF_CAPS                =$02
defc    KBF_SCAN                =$04
defc    KBF_BEEP                =$08
defc    KBF_DMND                =$10
defc    KBF_KEY                 =$20
defc    KBF_SQR                 =$40
defc    KBF_LOCKED              =$80

defc    IN_ASPC                 =$B0
defc    IN_AESC                 =$B4
defc    IN_AMEN                 =$B5
defc    IN_AIDX                 =$B6
defc    IN_AHEL                 =$B7
defc    IN_SQU                  =$B8
defc    IN_DSPC                 =$C0
defc    IN_DESC                 =$C4
defc    IN_DMEN                 =$C5
defc    IN_DIDX                 =$C6
defc    IN_DHEL                 =$C7
defc    IN_DIA                  =$C8
defc    IN_SESC                 =$D4
defc    IN_SMEN                 =$D5
defc    IN_SIDX                 =$D6
defc    IN_SHEL                 =$D7
defc    IN_SHI                  =$D8
defc    IN_ENTER                =$E1
defc    IN_TAB0                 =$E2
defc    IN_DELX                 =$E3
defc    IN_MEN                  =$E5
defc    IN_IDX                  =$E6
defc    IN_HLP                  =$E7
defc    IN_LOCK                 =$E8

defc    AT_B_Boot               =7
defc    AT_B_Draw               =5
defc    AT_B_Popd               =3

lston
