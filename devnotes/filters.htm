<!doctype html public "-//w3c//dtd html 4.0 transitional//en">

<html>

<head>

   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">

   <meta name="GENERATOR" content="Mozilla/4.6 [en] (Win98; I) [Netscape]">

   <title>Filters</title>

</head>

<body>

<table BORDER=0 CELLSPACING=0 CELLPADDING=0 WIDTH="100%">

<tr>

<th ALIGN=CENTER COLSPAN="3">Z88 Developers' Notes</th>

</tr>

<tr>

<td ALIGN=LEFT VALIGN=BOTTOM WIDTH="10%"><a href="kdecoder.htm">Previous</a></td>

<td ALIGN=CENTER VALIGN=BOTTOM WIDTH="80%"><a href="index.htm">Contents</a></td>

<td ALIGN=RIGHT VALIGN=BOTTOM WIDTH="10%"><a href="timedate.htm">Next</a></td>

</tr>

</table>



<hr WIDTH="100%">

<p>



<b><font size=+1>10. Filters</font></b>

<p>Filters, as provided on the Z88, are a fairly general means of achieving

simple context-independent transformations in a character sequence. Their

anticipated use is in simple text processing, but they may potentially

be used for more complex tasks. The calls for handling filters are:

<pre><a href='gnflo.htm'>GN_Flo</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; open a filter, returning a filter handle

<a href='gnflw.htm'>GN_Flw</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; write a character to a filter

<a href='gnflr.htm'>GN_Flr</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; read a character from a filter

<a href='gnfpb.htm'>GN_Fpb</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; push a character back into the filter

<a href='gnflf.htm'>GN_Flf</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; flush the filter

<a href='gnflc.htm'>GN_Flc</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; close the filter</pre>

To use a filter, the programmer must first set up a 'Filter Definition

Table' (FDT), which determines the operation of the filter. The filter

must then be opened with <a href='gnflo.htm'>GN_Flo</a> with the programmer giving the address

of the FDT and setting various input parameters. <a href='gnflo.htm'>GN_Flo</a> returns a filter

handle which the other filter routines takes as input. Once open the filter

can be written to a byte at a time using <a href='gnflw.htm'>GN_Flw</a> and read from (again a

byte at a time) using <a href='gnflr.htm'>GN_Flr</a>. The bytes read out of the filter will be

the processed form of the input; if processing has occurred on a particular

character this is indicated ny Fz = 1 on return from <a href='gnflr.htm'>GN_Flr</a>. While the

filter is open, it can be flushed, ie. all the characters written to it,

but not read out, can be discarded. It is also possible to push one character

back into the filter, before a subsequent filter read takes place. Finally

the filter is closed using <a href='gnflc.htm'>GN_Flc</a>, which apart from freeing the handle

and buffers associated with the filter also returns information as to how

many characters have been written to and read from the filter.

<p>Note that filters can be used with a number of GN calls, in place of

a source or destination which is in memory or a stream. Calls which can

operate with filter are:

<pre><a href='gnfcm.htm'>GN_Fcm</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; compress a filename

<a href='gnfex.htm'>GN_Fex</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; expand a filename

<a href='gngdn.htm'>GN_Gdn</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; convert ASCII decimal string to integer

<a href='gnpdn.htm'>GN_Pdn</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; convert integer to ASCII decimal string

<a href='gngtm.htm'>GN_Gtm</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; convert ASCII string to internal time

<a href='gnptm.htm'>GN_Ptm</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; convert internal time to ASCII string

<a href='gnpdt.htm'>GN_Pdt</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; convert internal date to ASCII string

<a href='gngdt.htm'>GN_Gdt</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; convert ASCII string to internal date

<a href='gnskc.htm'>GN_Skc</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; skip character

<a href='gnskd.htm'>GN_Skd</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; skip to delimiter

<a href='gnskt.htm'>GN_Skt</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; skip to value</pre>

<b>How the filter works</b>

<p>The filter definition table provides a list of strings to be searched

for in the input sequence, and when one is found it will replace the found

string with a replacement string also specified in the table. The table

might contain the contain the following pairs of strings:

<pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <i>Search</i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <i>Replace

</i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Monday&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Mon

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Tuesday&nbsp;&nbsp;&nbsp;&nbsp; Tue

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Wednesday&nbsp;&nbsp; Wed

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Thursday&nbsp;&nbsp;&nbsp; Thu

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Friday&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Fri

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Saturday&nbsp;&nbsp;&nbsp; Sat

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Sunday&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Sun</pre>

If the characters M,o,n,d,a,y - were pushed into the filter, then the characters

pulled from the other end (via <a href='gnflr.htm'>GN_Flr</a>) would be: M,o,n - and then and 'End

of file' return code, RC_EOF ($09), would be encountered. Thus the filter

provides a convenient means of performing simple text processing.

<p>Because the filter can only search for strings to substitute amongst

characters which are 'in' the filter, the normal use is to push in the

entire input string and pull out the entire result, each in one go. Also

note that the filter routine will select the first successful match in

the FST, so if one of the search strings is an extension of another, the

longer should come first if the obvious substitution is required. For instance:

<pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Mon&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Lundi

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Monday&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Lundi</pre>

would result in the transformation of "Monday" into "Lundiday"; probably

not what was intended.

<br>&nbsp;

<p><b>Filter Definition Table</b>

<pre>2 bytes&nbsp;&nbsp;&nbsp;&nbsp; Size of FDT in bytes

1 byte&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Options for left-hand strings

1 byte&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Options for right-hand strings</pre>

The options for the strings may be made up of some combination of the following

bit settings:

<pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 128&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Table has top bit set characters (ISO standard)

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 64&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Table has numeric data

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 32&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Table has alphabetic data

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 16&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Table has puncuation characters</pre>

Then come the entries, with the following format:

<pre>1 byte&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1+m

m bytes&nbsp;&nbsp;&nbsp;&nbsp; search string

1 byte&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1+n

n bytes&nbsp;&nbsp;&nbsp;&nbsp; replacement string</pre>

The 'length bytes are actually a displacement to the character beyond the

next string, hence they are one greater than the length of the string.

<p>RESTRICTIONS: The FDT must not span a 16K boundary, and due to a software

bug, the FDT must be addressed in segment 1.

<p>The filter calls are fully specified in "System Calls Reference".

<br>&nbsp;

<p><b>Example</b>

<p>

<hr WIDTH="100%">

<pre>include ":*//memory.def"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ; memory call definitions

include ":*//stdio.def"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ; standard I/O definitions</pre>

<tt>; it is assumed that this code would be running in segment 3</tt>

<br><tt>; - it finds out which bank it is running in and binds this bank

to segment 1</tt>

<br><tt>; Note that the binding of segment 3 does not change</tt>

<br><tt>;</tt>

<br><tt>; the routine assumes the address of the string is held at</tt>

<br><tt>; the static address 'input_string'</tt>

<br><tt>;</tt>

<br><tt>; the effect of the routine is to abbreviate full day names</tt>

<br><tt>; to the 3 character day names</tt>

<pre>.abbreviate ld&nbsp;&nbsp; c, MS_S3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ; assumes table is in segment 3

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; call_oz(<a href='osmgb.htm'>OS_Mgb</a>)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ; get binding of segment 3

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ld&nbsp;&nbsp; c, MS_S1

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; call_oz(<a href='osmpb.htm'>OS_Mpb</a>)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ; bind table into segment 1. Note bank

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ; is still bound to segment 3

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ld&nbsp;&nbsp; hl, fdt_Table&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ; start address of table

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ld&nbsp;&nbsp; a,h

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; and&nbsp; @00111111&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ; mask out segment bits (15, 14)

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; or&nbsp;&nbsp; MM_S1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ; merge memory mask for segment 1

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ld&nbsp;&nbsp; h,a&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ; HL now addresses segment 1



&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ld&nbsp;&nbsp; a, 4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ; buffer size in B

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ld&nbsp;&nbsp; b, 30&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ; buffer size

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; call_oz(<a href='gnflo.htm'>GN_Flo</a>)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ; open filter

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ret&nbsp; c&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ; exit if error



&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ld&nbsp;&nbsp; hl, (input_string) ; address of string to process

.loop&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ld&nbsp;&nbsp; a,(hl)

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cp&nbsp;&nbsp; 0

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; jr&nbsp;&nbsp; z, end_loop

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; call_oz(GN_FPW)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ; write character to filter

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; inc&nbsp; hl

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; jr&nbsp;&nbsp; loop



.end_loop&nbsp;&nbsp; call_oz(<a href='gnflr.htm'>GN_Flr</a>)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ; pull character from filter

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; jr&nbsp;&nbsp; c, finished&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ; exit if last one or error

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; call_oz(<a href='osout.htm'>OS_Out</a>)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ; write converted char to std. output

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; jr&nbsp;&nbsp; end_loop



.finished&nbsp;&nbsp; call_oz(<a href='gnflc.htm'>GN_Flc</a>)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ; close the filter

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; call_oz(<a href='gnnln.htm'>GN_Nln</a>)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ; new line

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ret



.fdt_start&nbsp; defw fdt_end-fdt_start&nbsp; ; length of FDT

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; defb 32&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ; search string alphabetic

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; defb 32&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ; replace string alphabetic



&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; defm 7 &amp; "Monday"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ; abbreviate Monday

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; defm 4 &amp; "Mon"



&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; defm 8 &amp; "Tuesday"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ; abbreviate Tuesday

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; defm 4 &amp; "Tue"



&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; defm 10 &amp; "Wednesday"&nbsp;&nbsp; ; abbreviate Wednesday

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; defm 4 &amp; "Wed"



&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; defm 9 &amp; "Thursday"&nbsp;&nbsp;&nbsp;&nbsp; ; abbreviate Thursday

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; defm 4 &amp; "Thu"



&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; defm 7 &amp; "Friday"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ; abbreviate Friday

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; defm 4 &amp; "fri"



&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; defm 9 &amp; "Saturday"&nbsp;&nbsp;&nbsp;&nbsp; ; abbreviate Saturday

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; defm 4 &amp; "Sat"



&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; defm 7 &amp; "Sunday"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ; abbreviate Sunday

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; defm 4 &amp; "Sun"



.fdt_end&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ; end of table



</pre>

<p>

<hr WIDTH="100%">

<table BORDER=0 CELLSPACING=0 CELLPADDING=0 WIDTH="100%">

<tr>

<td ALIGN=LEFT VALIGN=TOP WIDTH="33%"><a href="kdecoder.htm">Previous</a></td>

<td ALIGN=CENTER VALIGN=TOP WIDTH="34%"><a href="index.htm">Contents</a></td>

<td ALIGN=RIGHT VALIGN=TOP WIDTH="33%"><a href="timedate.htm">Next</a></td>

</tr>

<tr>

<td ALIGN=LEFT VALIGN=TOP WIDTH="33%">Input and the keyboard decoder</td>

<td ALIGN=CENTER VALIGN=TOP WIDTH="34%">Filters</td>

<td ALIGN=RIGHT VALIGN=TOP WIDTH="33%">Time and date management</td>

</tr>

</table>



</body>

</html>

